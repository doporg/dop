#!/usr/bin/groovy
pipeline{
	agent any

	environment {
		REPOSITORY="https://github.com/nju-softeng/dop-server.git"
		SERVICE_DIR="defect-location-server"
		DOCKER_REGISTRY_HOST="172.29.7.157:85"
		DOCKER_REGISTRY_ALGORITHM="172.29.7.157:85/dop/defect-location-server-algorithm"
        DOCKER_REGISTRY_BACKEND="172.29.7.157:85/dop/defect-location-server-backend"
	}

	stages {
		stage('pull code') {
			steps {
				echo "start fetch code from git:${REPOSITORY}"
				deleteDir()
                checkout([$class: 'GitSCM', branches: [[name: "*/${branch}"]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: "${REPOSITORY}"]]])
                script {
                    time = sh(returnStdout: true, script: 'date "+%Y%m%d%H%M"').trim()
                    git_version = sh(returnStdout: true, script: 'git log -1 --pretty=format:"%h"').trim()
                    build_tag = time+git_version
                }
			}
		}

		stage('build maven') {
			steps {
                echo "start building"
                dir(SERVICE_DIR){
                    dir("backend") {
                        sh "ls -l"
                        sh "mvn -U -am clean package"
                    }
                }
			}
		}

		stage('build docker') {
			steps {
                echo "start building image"
                echo "image tag : ${build_tag}"
                dir(SERVICE_DIR) {
                    dir("algorithm") {
                        sh "ls -l"
                        sh "docker build -t ${DOCKER_REGISTRY_ALGORITHM}:${build_tag} ."
                    }

                    dir("backend") {
                        sh "ls -l"
                        sh "docker build -t ${DOCKER_REGISTRY_BACKEND}:${build_tag} ."
                    }
                }
			}
		}
		

       stage('push docker') {
            steps {
                echo "start pushing image"
                dir(SERVICE_DIR){
                  sh "ls -l"
                  withCredentials([usernamePassword(credentialsId: 'docker_registry', passwordVariable: 'docker_registryPassword', usernameVariable: 'docker_registryUsername')]) {
                      sh "docker login -u ${docker_registryUsername} -p ${docker_registryPassword} ${DOCKER_REGISTRY_HOST}"
                      sh "docker push ${DOCKER_REGISTRY_ALGORITHM}:${build_tag}"
                      sh "docker push ${DOCKER_REGISTRY_BACKEND}:${build_tag}"
                  }
                }
            }
        }

        stage('update yaml') {
            steps{
                echo "start change yaml image tag"
                dir(SERVICE_DIR){
                    sh "ls -l"
                    sh "sed -i 's/<BUILD_TAG>/${build_tag}/' manifests.yaml"
                    sh "cat manifests.yaml"
                }
            }
        }

		stage('deploy') {
			steps {
				echo "start deploy"
				dir(SERVICE_DIR){
				    sh "ls -l"
				    sh "kubectl apply -f manifests.yaml"
				}
			}
		}
	}
}
