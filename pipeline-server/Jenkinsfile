#!/groovy
pipeline{
    agent any

    environment {
        REPOSITORY="https://github.com/nju-softeng/dop-server.git"
        SERVICE_DIR="pipeline-server"
        DOCKER_REGISTRY_HOST="172.29.7.157:85"
        DOCKER_REGISTRY="172.29.7.157:85/dop/pipeline-server"
        PIPELINE_SONAR_TOKEN=credentials('pipeline-sonar-token')
        HARBOR_HOST_PORT=credentials('harbor-host-port')
    }

    stages {
        stage('pull code') {
            steps {
                echo "start fetch code from git:${REPOSITORY}"
                deleteDir()
                //git "${REPOSITORY}"
                checkout([$class: 'GitSCM', branches: [[name: "*/${branch}"]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: "${REPOSITORY}"]]])
                script {
                    time = sh(returnStdout: true, script: 'date "+%Y%m%d%H%M"').trim()
                    git_version = sh(returnStdout: true, script: 'git log -1 --pretty=format:"%h"').trim()
                    build_tag = time+git_version
                }
            }
        }

		stage('fill in secrets') {
		    steps {
                echo "fill in secrets"
                dir(SERVICE_DIR){
                    sh "ls -l src/main/resources/"
                    sh "sed -i 's/<HARBOR_HOST_PORT>/${HARBOR_HOST_PORT}/' src/main/resources/application-production.yml"
                }
		    }
		}

        stage('build maven') {
            steps {
                echo "star compile"
                dir(SERVICE_DIR){
                    sh "ls -l"
                    sh "mvn -U -am clean package"
                }
            }
        }

        stage('static code analysis') {
            steps {
                echo "run sonarqube"
                dir(SERVICE_DIR){
                    sh "mvn sonar:sonar -Dsonar.projectKey=pipeline-server -Dsonar.host.url=http://localhost:9000 -Dsonar.login=${PIPELINE_SONAR_TOKEN}"
                }
            }
        }

        stage('build docker') {
            steps {
                echo "start build image"
                echo "image tag : ${build_tag}"
                dir(SERVICE_DIR){
                    sh "ls -l"
                    sh "docker build -t ${DOCKER_REGISTRY}:${build_tag} ."
                }
            }
        }

       stage('push docker') {
            steps {
                echo "start push image"
                dir(SERVICE_DIR){
                  sh "ls -l"
                  withCredentials([usernamePassword(credentialsId: 'docker_registry', passwordVariable: 'docker_registryPassword', usernameVariable: 'docker_registryUsername')]) {
                      sh "docker login -u ${docker_registryUsername} -p ${docker_registryPassword} ${DOCKER_REGISTRY_HOST}"
                      sh "docker push ${DOCKER_REGISTRY}:${build_tag}"
                  }
                }
            }
        }

        stage('update yaml') {
            steps{
                echo "start change yaml image tag"
                dir(SERVICE_DIR){
                    sh "ls -l"
                    sh "sed -i 's/<BUILD_TAG>/${build_tag}/' k8s.yaml"
                    sh "cat k8s.yaml"
                }
            }
        }

        stage('deploy') {
            steps {
                echo "start deploy"
                dir(SERVICE_DIR){
                    sh "ls -l"
                    sh "kubectl apply -f k8s.yaml"
                }
            }
        }
    }
}
